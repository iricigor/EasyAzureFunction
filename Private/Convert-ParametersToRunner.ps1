function Convert-ParametersToRunner {
    
    param (
        
        [string[]]$Command,
        [switch]$Invoke,
        [switch]$Clipboard

    )

    BEGIN {
        $Response = @()
        # TODO: Add some info how file was generated?
        $Response += "# run.ps1 auto-generated by EasyAzureFunction module, iricigor@gmail.com","'run.ps1 start'"
    }

    PROCESS {

        foreach ($C1 in $Command) {
            Write-Verbose -Message "Processing command $C1"
            $Params = Get-Parameters $C1 | Select -Expand Name -Unique

            # generate code to read parameters
            $Response += '', '# POST method: $req', '$requestBody = Get-Content $req -Raw | ConvertFrom-Json'
            $Response += "`$InvokeCommand = `$requestBody.InvokeCommand" # reads hidden parameter
            foreach ($P1 in $Params) {
                $Response += "`$$P1 = `$requestBody.$P1"  # output like $url = $req_query_url
            }
        }

        # generate code to open default page
        $Response += '','# prepare output, either default web-page or invoke command'
        $Response += 'if (!$InvokeCommand) {',"  'show default web page'", '  cd $EXECUTION_CONTEXT_FUNCTIONDIRECTORY', '  $Output = Get-Content .\index.html -Raw'
        # TODO: Evaluate if page should be called index.html, or index.CommandName.html

        # generate code to invoke command in try catch block, using parameters splatting
        $Response += '} else {',"  'invoke command'", '  try {'
        $Response += "    `$ParamsHash = @{}"
        foreach ($P1 in $Params) {
            $Response += "    if (`$$P1) {`$ParamsHash.Add('$P1',`$$P1)}"
        }
        $Response += "    `$Output = $C1 @ParamsHash | Out-String"
        $Response += '  } catch {','    $Output = $_','  }','}'
        # TODO: Add some differentiation of output, i.e. error to be red

        # convert output to HTML and parse it back
        $Response += '', '# parse and send back output'
        $Response += "`$Output2 = [string]::Format(`'{{ `"Status`": 200, `"Body`": `"{0}`", `"Headers`": {{`"content-type`": `"text/html`" }} }}', `$Output -replace '`"',`"'`")"
        $Response += 'Out-File -Encoding utf8 -FilePath $res -inputObject $Output2'

    }

    END {
        if ($Clipboard) {
            $Response | Set-Clipboard
        } elseif ($Invoke) {
            $TempFile = [System.IO.Path]::GetTempFileName() + '.txt'
            $Response | Out-File $TempFile
            Invoke-Item $TempFile
        } else {
            $Response
        }
    }
}